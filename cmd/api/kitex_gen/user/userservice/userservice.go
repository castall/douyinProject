// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "douyinProject/api/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RegistMethod": kitex.NewMethodInfo(registMethodHandler, newUserServiceRegistMethodArgs, newUserServiceRegistMethodResult, false),
		"LoginMethod":  kitex.NewMethodInfo(loginMethodHandler, newUserServiceLoginMethodArgs, newUserServiceLoginMethodResult, false),
		"InfoMethod":   kitex.NewMethodInfo(infoMethodHandler, newUserServiceInfoMethodArgs, newUserServiceInfoMethodResult, false),
		"AuthMethod":   kitex.NewMethodInfo(authMethodHandler, newUserServiceAuthMethodArgs, newUserServiceAuthMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegistMethodArgs)
	realResult := result.(*user.UserServiceRegistMethodResult)
	success, err := handler.(user.UserService).RegistMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegistMethodArgs() interface{} {
	return user.NewUserServiceRegistMethodArgs()
}

func newUserServiceRegistMethodResult() interface{} {
	return user.NewUserServiceRegistMethodResult()
}

func loginMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginMethodArgs)
	realResult := result.(*user.UserServiceLoginMethodResult)
	success, err := handler.(user.UserService).LoginMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginMethodArgs() interface{} {
	return user.NewUserServiceLoginMethodArgs()
}

func newUserServiceLoginMethodResult() interface{} {
	return user.NewUserServiceLoginMethodResult()
}

func infoMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceInfoMethodArgs)
	realResult := result.(*user.UserServiceInfoMethodResult)
	success, err := handler.(user.UserService).InfoMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInfoMethodArgs() interface{} {
	return user.NewUserServiceInfoMethodArgs()
}

func newUserServiceInfoMethodResult() interface{} {
	return user.NewUserServiceInfoMethodResult()
}

func authMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAuthMethodArgs)
	realResult := result.(*user.UserServiceAuthMethodResult)
	success, err := handler.(user.UserService).AuthMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAuthMethodArgs() interface{} {
	return user.NewUserServiceAuthMethodArgs()
}

func newUserServiceAuthMethodResult() interface{} {
	return user.NewUserServiceAuthMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegistMethod(ctx context.Context, request *user.RegistReq) (r *user.RegistResp, err error) {
	var _args user.UserServiceRegistMethodArgs
	_args.Request = request
	var _result user.UserServiceRegistMethodResult
	if err = p.c.Call(ctx, "RegistMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginMethod(ctx context.Context, request *user.LoginReq) (r *user.LoginResp, err error) {
	var _args user.UserServiceLoginMethodArgs
	_args.Request = request
	var _result user.UserServiceLoginMethodResult
	if err = p.c.Call(ctx, "LoginMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InfoMethod(ctx context.Context, request *user.InfoReq) (r *user.InfoResp, err error) {
	var _args user.UserServiceInfoMethodArgs
	_args.Request = request
	var _result user.UserServiceInfoMethodResult
	if err = p.c.Call(ctx, "InfoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AuthMethod(ctx context.Context, request *user.AuthReq) (r *user.AuthResp, err error) {
	var _args user.UserServiceAuthMethodArgs
	_args.Request = request
	var _result user.UserServiceAuthMethodResult
	if err = p.c.Call(ctx, "AuthMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
